//CLASE ECOSISTEMA

/*
*	Funcion para crear la matriz de variación de cada iteración
*/
ArrayList<ArrayList<float>> CrearMatriz(arrayList<Especie> especies,int bioma)	//NOTA, PARALELIZABLE
{
	ArrayList<ArrayList<float>>  matriz=new ArrayList();
	int size=especies.size();
	for(int i=0;i<size;i++)
	{
		matriz.set(i;new ArrayList());
		for(int i=0;j<size;j++)
		{
			if(i==j)
			{
				matriz.get(i).set(i,especies.get(i).GetCrecimiento(bioma));
			}
			else
			{
				matriz.get(i).set(i,especies.get(i).Depredar(especies.get(j)));
			}
		}
	}
	return matriz;
}

/*
*	Funcion para añadir más especies a la matriz de crecimiento de población
*/
void AmpliarMatriz(arrayList<Especie> especies,int bioma, ArrayList<ArrayList<float>> matriz) //NOTA, PARALELIZABLE
{
	int sizeV=matriz.size();
	int sizeN=especies.size();
	for(int i=0;i<sizeV;i++)
		for(int j=sizeV;j<sizeN;j++)
			matriz.get(i).set(i,especies.get(i).Depredar(especies.get(j)));
	for(int i=sizeV;i<sizeN;i++)
		{
			matriz.set(i;new ArrayList());
			for(int i=0;j<sizeN;j++)
			{
				if(i==j)
				{
					matriz.get(i).set(i,especies.get(i).GetCrecimiento(bioma));
				}
				else
				{
					matriz.get(i).set(i,especies.get(i).Depredar(especies.get(j)));
				}
			}
		}
	}
}

/*
* Funcion para aplicar un ciclo sobre la población, luego comprueba si una especie se ha quedado sin alimento
*/
ArrayList<Integer> EjecutarCiclo(ArrayList<Integer> poblacion, ArrayList<ArrayList<float>> matriz)
{
	ArrayList<Integer> resultado = producto(poblacion,matriz); 
	int size=poblacion.size();
	int depredados;
	for(int i=0;i<size;i++)
	{
		if(!especies.get(i).FLAGS AUTOTROFO)
		{
		depredados=0;
		for(int j=0;j<size;j++)
		{
			if(Matriz.get(i).get(j)!=0 && i!=j&&poblacion.get(j)>0)
			{
				depredados++;
				j=size;
			}
		}
		if(depredados==0)
			poblacion.set(i,0);
		}
	}
	return resultado;
}

/*
* Funcion para que si una especie ha consumido demasiado, eliminar los miembros que se han alimentado en exceso
*/
private void reducirExceso(int depredador, int alimentoQuitar, ArrayList<Integer> poblacion)
{
	int pob=poblacion.get(depredador)+(especies.get(depredador).getAlimRequerido()/alimentoQuitar);
	if(pob>0)
		poblacion.set(depredador,pob);
	else
		poblacion.set(depredador,0);
}

/*
*	Producto de vector por matriz con la particularidad de que si el resultado es menor que cero, ajusta la otra poblacion y no opera si la columna o fila tiene poblacion 0
*	Ademas, previamente a encontrarse a si mismo, calcula sobre la poblacion anterior si se ha consumido demasiado, y luego al encontrarse a si mismo, elimina esa diferencia
*/
private ArrayList<Integer> producto(ArrayList<Integer> vector, ArrayList<ArrayList<float>> matriz)
{
	float sum;
	int size=vector.size();
	for(int i=0;i<size;i++)
		if(vector.get(i)>0)
		{
			sum=vector.get(i);
			for(int j=0;j<size;j++)
			{
			int depredados=GetDepredados(j);	
				if(vector.get(j)>0)
				{
					if(i==j)
					{
						sum-=vector.get(i);
						sum+=float(vector.get(i))*matriz.get(i).get(j);
						if(sum<0)
						{
							sum=0;
						}
					}
					else
					{
						sum+=float(vector.get(i))*matriz.get(i).get(j);
						if(sum<0)
						{
							reducirExceso(j,sum*especies.get(i).getAlimDado()/depredados,vector); //Si depredados es 0 esto no es posible
							sum=0;
						}
					}
				}
			vector.set(i,sum);
			}
		}
}

private int GetDepredados(int i)
{
	int sum=0;
	for (int j=0;j<Matriz.size();j++)
		if(Matriz.get(i).get(j)!=0 && i!=j)
			sum++;
	return sum;
}

//CLASE ESPECIE

/*
*	Funcion que calcula el desarrollo de la especie en un bioma sin interaccion de otras especies
*/
float GetCrecimiento(int bioma)
{
	return((float)ProbReproduccion*(float)Camada/100+1-1/((entorno.get(bioma)+1)*(entorno.get(bioma)+1)*(entorno.get(bioma)+1)));
}

/*
*	Funcion que calcula la tasa de depredacion de una especie sobre otra, un valor positivo es que en vez de depredar, beneficia
*/
float Depredar(Especie e2)
{
	if(FLAGS SIMBIOSIS)
		return(float(this.alimentoRequeridoB*crecB/e2.alimentoDadoB);
	if(FLAGS DEPREDAR)&&(abs(5*(this.tamano-e2.tamano))+this.combate-e2.combate+this.caza-e2.defensa)>0))
		return(float(-this.alimentoRequerido/e2.alimentoDado);
}